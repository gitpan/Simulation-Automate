.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Automate 3"
.TH Automate 3 "2003-09-04" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Simulation::Automate \- A Simulation Automation Tool
.PP
The set of modules is called \fBSimulation::Automate\fR.
.PP
The tool itself is called \fBSynSim\fR, the command \f(CW\*(C`synsim\*(C'\fR.
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
.IP "\(bu" 4
a unix-like system
.IP "\(bu" 4
perl 5
.IP "\(bu" 4
gnuplot for postprocessing (optional)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&       use Simulation::Automate;
.Ve
.PP
.Vb 1
\&       &synsim();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SynSim is a generic template-driven simulation automation tool. It works with any simulator that accepts text input files and generates text output (and even those that don't. See \s-1EXAMPLES\s0 for special cases). It executes thousands of simulations with different input files automatically, and processes the results. Postprocessing facilities include basic statistical analysis and automatic generation of PostScript plots with Gnuplot. SynSim is entirely modular, making it easy to add your own analysis and postprocessing routines.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.IP "1. Download the gzipped tar file \fISimulation\-Automate\-0.9.5.tar.gz\fR" 4
.IX Item "1. Download the gzipped tar file Simulation-Automate-0.9.5.tar.gz"
.PD 0
.IP "2. Extract the archive:" 4
.IX Item "2. Extract the archive:"
.PD
.Vb 1
\&        tar -xvf Simulation-Automate-0.9.5.tar.gz
.Ve
.IP "3. Create the Makefile:" 4
.IX Item "3. Create the Makefile:"
.Vb 2
\&        cd Simulation-Automate-0.9.5
\&        perl Makefile.PL
.Ve
.IP "4. Make Simulation::Automate:" 4
.IX Item "4. Make Simulation::Automate:"
.Vb 1
\&        make
.Ve
.IP "5. Test Simulation::Automate:" 4
.IX Item "5. Test Simulation::Automate:"
.Vb 1
\&         make test
.Ve
.IP "6. Install Simulation::Automate:" 4
.IX Item "6. Install Simulation::Automate:"
.Vb 1
\&         make install
.Ve
.IP "7. For a local installation (if you don't have root access):" 4
.IX Item "7. For a local installation (if you don't have root access):"
.Vb 1
\&         make localinstall
.Ve
.Sp
or
.Sp
.Vb 1
\&         perl -e "use Simulation::Automate;&Simulation::Automate::localinstall();"
.Ve
.IP "8. Setup your local SynSim project (SynSim is the name for the tool contained in Simulation::Automate). This creates the directory structure for your simulations:" 4
.IX Item "8. Setup your local SynSim project (SynSim is the name for the tool contained in Simulation::Automate). This creates the directory structure for your simulations:"
.Vb 2
\&         make setup
\&or
.Ve
.Sp
.Vb 1
\&         perl -e "use Simulation::Automate;&Simulation::Automate::setup();"
.Ve
.PP
The archive structure is as follows:
.PP
.Vb 9
\&        README    
\&        Makefile.PL       
\&        Automate.pm
\&        Automate/
\&                Remote.pm
\&                PostProcLib.pm
\&                Analysis.pm
\&                Dictionary.pm
\&                PostProcessors.pm
.Ve
.PP
.Vb 15
\&        eg/
\&                synsim  
\&                synsim.data
\&                ErrorFlags.data
\&                Histogram.data
\&                SweepVar.data
\&                Expressions.data
\&                gnuplot.data
\&                SOURCES/
\&                        bufsim3.cc
\&                        MersenneTwister.h
\&                TEMPLATES/              
\&                        DEVTYPES/
\&                        SIMTYPES/
\&                                bufsim3.templ
.Ve
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
SynSim must be configured for use with your simulator. This is done by providing template and source files, creating (or modifying) datafiles and (optionally) customizing some modules for postprocessing the simulation results. All files must be put in a particilar directory structure:
.Sh "Directory structure"
.IX Subsection "Directory structure"
You can use \*(L"make setup\*(R"  to create a SynSim directory structure. If you want to create it manually, this is the structure:
.PP
.Vb 8
\&        YourProject/
\&                        synsim  
\&                        YourDataFile.data
\&                        [SOURCES/]
\&                        TEMPLATES/              
\&                                 [DEVTYPES/]
\&                                 SIMTYPES/
\&                                        YourSimTempl.templ
.Ve
.PP
.Vb 3
\&        [Simulation/SynSim/]
\&                                [Dictionary.pm]
\&                                [PostProcessors.pm]
.Ve
.PP
The synsim script contains the 2 lines from the \s-1SYNOPSIS\s0. 
The local Simulation/Automate modules are only required if you want to customize the postprocessing (highly recommended). 
.Sh "Source files"
.IX Subsection "Source files"
Copy all files which are needed \*(L"read\-only\*(R" by your simulator (e.g. header files, library files) to \fI\s-1SOURCES/\s0\fR. This directory is optional.
.Sh "Template files"
.IX Subsection "Template files"
Template files are files in which simulation variables will be substituted by their values to create the input file for your simulator. SynSim can create an input file by combining two different template files, generally called device templates and simulation templates. This is useful in case you want to run different types of simulations on different devices, e.g. \s-1DC\s0 analysis, transient simulations, small-signal and noise analysis  on 4 different types of operation amplifiers. In total, this requires 16 different input files, but only 8 different template files (4 for the simulation type, 4 for the device types).
.IP "1." 4
To create a template file, start from an existing input file for your simulator. Replace the values of the variables to be modified by SynSim by a SynSim variable name (e.g. 
var1 = 2.5 => var1 = _VAR1). 
.IP "2." 4
Put the template files in \fI\s-1TEMPLATES/SIMTYPES\s0\fR and \fI\s-1TEMPLATES/DEVTYPES\s0\fR.
.Sp
There must be at least one template file in \fI\s-1SIMTYPES\s0\fR; files in \fI\s-1DEVTYPES\s0\fR are optional.
SynSim will check both directories for files as defined in the datafile. If a matching file is found in \fI\s-1DEVTYPES\s0\fR, it will be prepended to the simulation template from \fI\s-1SIMTYPES\s0\fR. This is useful if the datafile defines multiple simulation types on a particular device (See \*(L"\s-1DATAFILE\s0 \s-1DESCRIPTION\s0\*(R" for more information).
.PP
\&\fB\s-1NOTE:\s0\fR
.PP
SynSim creates a run directory ath the same level as the \s-1SOURCES\s0 and \s-1TEMPLATES\s0 directories. All commands (compilations etc.) are executed in that directory. As a consequence, paths to source files (e.g. header files) should be "\f(CW\*(C`../SOURCES/\*(C'\fR\fIsourcefilename\fR".
.Sh "Datafile"
.IX Subsection "Datafile"
The datafile is the input file for synsim. It contains the list of simulation variables and their values to be substituted in the template files, as well as a number of configuration variables (See \*(L"\s-1DATAFILE\s0 \s-1DESCRIPTION\s0\*(R" for more information).
.Sh "Postprocessing (optional)"
.IX Subsection "Postprocessing (optional)"
The \fIPostProcessing.pm\fR module contains routines to perform postprocessing on the simulation results. A number of generic routines are provided, as well as a library of functions to make it easier to develop your own postprocessing routines. See \s-1POSTPROCESSING\s0 for a full description).
.Sh "Dictionary (optional)"
.IX Subsection "Dictionary (optional)"
The \fIDictionary.pm\fR module contains descriptions of the parameters used in the simulation. These descriptions are used by the postprocessing routines to make the simulation results more readable. See \s-1DICTIONARY\s0 for a full description).
.SH "DATAFILE DESCRIPTION"
.IX Header "DATAFILE DESCRIPTION"
The datafile defines which simulations to run, with which parameter values to use, and how to run the simulation. By convention, it has the extension \f(CW\*(C`.data\*(C'\fR.
.Sh "Syntax"
.IX Subsection "Syntax"
The datafile is a case-sensitive text file with following syntax:
.IP "Comments and blanks" 4
.IX Item "Comments and blanks"
Comments are preceded by '#'. 
Comments, blanks and empty lines are ignored
.IP "Simulation variables" 4
.IX Item "Simulation variables"
Simulation variables (\*(L"parameters\*(R") are in \s-1UPPERCASE\s0 with a leading '_', and must be separated from their values with a '='.
.IP "Configuration variables" 4
.IX Item "Configuration variables"
Configuration variables (\*(L"keywords\*(R") are in \s-1UPPERCASE\s0, and must be separated from their values with a ':'.
.IP "Lists of values" 4
.IX Item "Lists of values"
Lists of values have one or more items. Valid list separators are ',',';' and, for a 2\-element list, '..'.
.Sp
If a (','\- or ';'\-separated) list has 3 elements \s-1START\s0,STOP,STEP |START|<|STOP| and |STEP|<|STOP\-START|, then this list will be expanded as a for-loop from \s-1START\s0 to \s-1STOP\s0 with step \s-1STEP\s0.
.IP "Section headers for multiple simulation types" 4
.IX Item "Section headers for multiple simulation types"
These must be lines containing only the simulation type 
.Sh "Simulation variables"
.IX Subsection "Simulation variables"
The main purpose of the datafile is to provide a list of all variables and their values to be substituted in the template files. 
The lists of values for the variables can be used in two different ways: 
.IP "Comma-separated list: combine values" 4
.IX Item "Comma-separated list: combine values"
A simulation will be performed for every possible combination of the values for all parameters. 
.Sp
Example:
.Sp
.Vb 2
\&        _PAR1 = 1,2
\&        _PAR2 = 3,4,5
.Ve
.Sp
defines 6 simulations: (_PAR1,_PAR2)=(1,3),(1,4),(1,5),(2,3),(2,4),(2,5)
.Sp
Simulation results for all values in ','\-separated list are stored in a separate files.
.IP "Semicolon-separated list: pair values" 4
.IX Item "Semicolon-separated list: pair values"
If more than one ';'\-separated list exists, they must have the same number of items. The values of all parameters at the same position in the list will be used.
.Sp
Example:
.Sp
.Vb 2
\&        _PAR1 = 0;1;2;4
\&        _PAR2 = 3;4;5;6
.Ve
.Sp
defines 3 simulations: (_PAR1,_PAR2)=(0,3);(1,4);(2,5);(4,6)
.Sp
Values from ';'\-separated lists are processed one after another while are values for all others parameters are kept constant. In other words, the ';'\-separated list is the innermost of all nested loops.
.Sp
Simulation results for all values in the ';'\-separated list are stored in a common file. For this reason, ';'\-separated lists are preferred as sweep variables (X\-axis values), whereas ','\-separated lists are more suited for parameters (sets of curves).
.Sp
Example: consider simulation of packet loss vs number of buffers with 3 types of buffer and 2 different traffic distributions.
.Sp
.Vb 3
\&        _NBUFS = 4;8;16;32;64;128
\&        _BUFTYPE = 1,2,3
\&        _TRAFDIST = 1,2
.Ve
.Sp
This will produces 6 files, each file containing the simulation results for all values of _NBUFS. A plot of this simulation would show a set of 6 curves, with _NBUFS as X\-axis variable.
.IP "Semicolon-separated from;to;step list" 4
.IX Item "Semicolon-separated from;to;step list"
This is a special case where the list has exactly three elements From;To;Step and following condition holds:
.Sp
.Vb 1
\&  (|From|<|To|) AND (|Step|<|To-From|)
.Ve
.Sp
Example:
.Sp
.Vb 1
\&       _NBUFS = 16;64;8 #  from 16 to 64 in steps if 8: 16;24;32;40;48;56;64
.Ve
.IP "Double dotted list" 4
.IX Item "Double dotted list"
This is a shorthand for a ';'\-separated list if the value increase in steps of 1. E.g. 0..7 is equivalent to 0;1;2;3;4;5;6;7.
.Sh "Configuration variables"
.IX Subsection "Configuration variables"
A number of variables are provided to configure SynSim's behaviour:
.IP "\s-1INCLUDE\s0 (optional)" 4
.IX Item "INCLUDE (optional)"
If the value of \s-1INCLUDE\s0 is an exisiting filename, this datafile will be included on the spot.
.IP "\s-1COMMAND\s0" 4
.IX Item "COMMAND"
The program that runs the input file, i.e. the simulator command (default: perl).
.IP "\s-1EXT\s0" 4
.IX Item "EXT"
Extension of input file (default: .pl)
.IP "\s-1TEMPL\s0" 4
.IX Item "TEMPL"
Extension of template files (default: .templ)
.IP "\s-1SIMTYPE\s0" 4
.IX Item "SIMTYPE"
The type of simulation to perform. This can be a ','\-separated list. SynSim will look in \s-1TEMPLATES/SIMTYPES\s0 for a file with \s-1TEMPL\s0 and \s-1SIMTYPE\s0
.IP "\s-1DEVTYPE\s0 (optional)" 4
.IX Item "DEVTYPE (optional)"
The name of the device on which to perform the simulation. If defined, SynSim will look in \s-1TEMPLATES/DEVTYPES\s0 for a file with \s-1TEMPL\s0 and \s-1DEVTYPE\s0, and prepend this file to the simulation template before parsing.
.IP "\s-1OUTPUT_FILTER_PATTERN\s0" 4
.IX Item "OUTPUT_FILTER_PATTERN"
A Perl regular expression to filter the output of the simulation (default : .*).
.IP "\s-1ANALYSIS_TEMPLATE\s0" 4
.IX Item "ANALYSIS_TEMPLATE"
Name of the routine to be used for the result analysis (postprocessing). This routine must be defined in PostProcessors.pm (default: SweepVar, a generic routine which assumes a sweep for one variable and uses all others as parameters).
.IP "\s-1SWEEPVAR\s0 (optional)" 4
.IX Item "SWEEPVAR (optional)"
The name of the variable to be sweeped. Mandatory if the postprocessing routine is SweepVar. 
.IP "\s-1NORMVAR\s0 (optional)" 4
.IX Item "NORMVAR (optional)"
The name of the variable to normalise the results with. The results will be divided by the corresponding value of the variable.
.IP "\s-1NRUNS\s0 (optional)" 4
.IX Item "NRUNS (optional)"
The number of times the simulation has to be performed. For statistical work.
.IP "\s-1DATACOL\s0 (optional)" 4
.IX Item "DATACOL (optional)"
The column in the output file which contains simulation results (default: 2). Mandatory if using any of the generic postprocessing routines. 
.IP "\s-1TITLE\s0 (optional)" 4
.IX Item "TITLE (optional)"
String describing the simulation, for use in the postprocessing.
.IP "\s-1XLABEL\s0, \s-1YLABEL\s0, \s-1LOGSCALE\s0, \s-1STYLE\s0" 4
.IX Item "XLABEL, YLABEL, LOGSCALE, STYLE"
Variables to allow more flexibility in the customization of the plots. \s-1XLABEL\s0 and \s-1YLABEL\s0 are the X and Y axis labels. \s-1LOGSCALE\s0 is either X, Y or \s-1XY\s0, and results in a logarithmic scale for the chosen axis. \s-1STYLE\s0 is the gnuplot plot style (lines, points etc)
.IP "\s-1XTICS\s0, \s-1YTICS\s0, \s-1XSTART\s0, \s-1XSTOP\s0, \s-1YSTART\s0, \s-1YSTOP\s0" 4
.IX Item "XTICS, YTICS, XSTART, XSTOP, YSTART, YSTOP"
Variables to allow more flexibility in the customization of the plots (not implemented yet).
.Sh "Expressions"
.IX Subsection "Expressions"
The SynSim datafile has support for expressions, i.e. it is possible to express the value list of a variable in terms of the values of other variables.
.PP
Example:
.PP
.Vb 8
\&    # average packet length for IP dist 
\&    _MEANPL = ((_AGGREGATE==0)?2784:9120)
\&    # average gap width 
\&    _MEANGW= int(_MEANPL*(1/_LOAD-1)) 
\&    # average load
\&    _LOAD = 0.1;0.2;0.3;0.4;0.5;0.6;0.7;0.8;0.9
\&    # aggregate 
\&    _AGGREGATE =  0,12000
.Ve
.PP
The variables used in the expressions must be defined in the datafile, although not upfront. Using circular references will not work.
The expression syntax is Perl syntax, so any Perl function can be used. Due to the binding rules, it is necessary to enclose expressions using the ternary operator ?: with brackets (see example).
.PP
The next sections (\s-1DICTIONARY\s0 and \s-1POSTPROCESSING\s0) are optional. For instructions on how to run SynSim, go to \*(L"\s-1RUNNING\s0 \s-1SYNSIM\s0\*(R".
.SH "DICTIONARY"
.IX Header "DICTIONARY"
The \fIDictionary.pm\fR module contains descriptions of the parameters used in the simulation. These descriptions are used by the postprocessing routines to make the simulation results more readable. The dictionary is stored in an associative array called \f(CW\*(C`make_nice\*(C'\fR. The description of the variable is stored in a field called 'title'; Descriptions of values are stored in fields indexed by the values.
.PP
Following example illustrates the syntax:
.PP
.Vb 2
\&        # Translate the parameter names and values into something meaningful
\&        %Dictionary::make_nice=(
.Ve
.PP
.Vb 9
\&        _BUFTYPE => {
\&        title=>'Buffer type',
\&                     0=>'Adjustable',
\&                     1=>'Fixed-length',
\&                     2=>'Multi-exit',
\&                    },
\&        _YOURVAR1 => {
\&        title=>'Your description for variable 1',
\&        },
.Ve
.PP
.Vb 5
\&        _YOURVAR2 => {
\&        title=>'Your description for variable 2',
\&'val1' => 'First value of _YOURVAR2',
\&'val3' => 'Second value of _YOURVAR2',
\&        },
.Ve
.PP
.Vb 1
\&        );
.Ve
.SH "POSTPROCESSING"
.IX Header "POSTPROCESSING"
Postprocessing of the simulation results is handled by routines in the \f(CW\*(C`PostProcessors.pm\*(C'\fR module. This module uses the \f(CW\*(C`PostProcLib.pm\*(C'\fR and \f(CW\*(C`Analysis.pm\*(C'\fR.
.Sh "PostProcessors"
.IX Subsection "PostProcessors"
Routines to perform analysis on the simulation results in the PostProcessors module. In general you will have to create your own routines, but the version of \f(CW\*(C`PostProcessors.pm\*(C'\fR in the distribution contains a number of more or less generic postprocessing routines. All of these have hooks for simple functions that modify a file in\-place. To call these functions, include them in the datafile with the \f(CW\*(C`PREPROCESSOR\*(C'\fR variable. e.g:
.PP
.Vb 1
\&  PREPROCESSOR : modify_results_file
.Ve
.PP
All functions must be put in PostProcessors.pm, and the template could be like this:
.PP
.Vb 2
\&  sub modify_results_file {
\&  my $resultsfile=shift;
.Ve
.PP
.Vb 9
\&  open(IN,"<$resultsfile");
\&  open(TMP,">$resultsfile.tmp");
\&  while(<IN>) {
\&  #Do whatever is required
\&  }
\&  close IN;
\&  close TMP;
\&  rename "$resultsfile.tmp","$resultsfile" or die $!;
\&  }
.Ve
.IP "SweepVar" 4
.IX Item "SweepVar"
Required configuration variables: \f(CW\*(C`SWEEPVAR\*(C'\fR
.Sp
Creates a plot using \f(CW\*(C`SWEEPVAR\*(C'\fR as X\-axis and all other variables as parameters. This routine is completely generic. The \f(CW\*(C`SWEEPVAR\*(C'\fR value list must be semicolon\-separated.
.IP "SweepVarCond" 4
.IX Item "SweepVarCond"
Required configuration variables: \f(CW\*(C`SETVAR\*(C'\fR,\f(CW\*(C`SWEEPVAR\*(C'\fR and \f(CW\*(C`CONDITION\*(C'\fR. 
.Sp
Creates a plot using \f(CW\*(C`SETVAR\*(C'\fR as X\-axis; \f(CW\*(C`SWEEPVAR\*(C'\fR is checked against the condition \f(CW\*(C`COND\*(C'\fR (or \f(CW\*(C`CONDITION\*(C'\fR). The first value of \f(CW\*(C`SWEEPVAR\*(C'\fR that meets the condition is plotted. All other variables are parameters. This routine is completely generic. The \f(CW\*(C`SWEEPVAR\*(C'\fR value list must be semicolon\-separated.
.IP "ErrorFlags" 4
.IX Item "ErrorFlags"
Required configuration variables: \f(CW\*(C`SWEEPVAR\*(C'\fR, \f(CW\*(C`NRUNS\*(C'\fR
.Sp
Optional configuration variables: \f(CW\*(C`NSIGMAS\*(C'\fR
.Sp
Creates a plot using \f(CW\*(C`SWEEPVAR\*(C'\fR as X\-axis and all other variables as paramters. Calculates average and 95% confidence intervals for \f(CW\*(C`NRUNS\*(C'\fR simulation runs and plots error flags. This routine is fully generic, the confidence interval (95% by default) can be set with \s-1NSIGMAS\s0. See eg/ErrorFlags.data for an example datafile. The \f(CW\*(C`SWEEPVAR\*(C'\fR value list must be semicolon\-separated.
.IP "Histogram" 4
.IX Item "Histogram"
Required configuration variables: \f(CW\*(C`NBINS\*(C'\fR
.Sp
Optional configuration variables: \f(CW\*(C`BINWIDTH\*(C'\fR, \f(CW\*(C`OUTPUT_FILTER_PATTERN\*(C'\fR, \f(CW\*(C`NSIGMAS\*(C'\fR
.Sp
Creates a histogram of the simulation results. This requires the simulator to produce raw data for the histograms in a tabular format. The configuration variable \f(CW\*(C`OUTPUT_FILTER_PATTERN\*(C'\fR can be used to 'grep' the simulator output. When specifying logscale X or \s-1XY\s0 for the plot, the histogram bins will be logarithmic. See eg/Histogram.data for an example. 
The number of bins in the histogram must be specified via \f(CW\*(C`NBINS\*(C'\fR. The width of the bins can be set with \f(CW\*(C`BINWIDTH\*(C'\fR.
.Sh "PostProcLib"
.IX Subsection "PostProcLib"
In a lot of cases you will want to create your own postprocessing routines. To make this easier, a library of functions is at your disposal. This library resides in the \f(CW\*(C`PostProcLib.pm\*(C'\fR module. 
.PP
Following functions are exported:
.PP
.Vb 3
\&                           &prepare_plot        # does what it says. see example below
\&                           &gnuplot             # idem. Just pipes the first argument string to gnuplot. The option -persist can be added to keep the plot window after gnuplot exits.
\&                           &gnuplot_combined    # See example, most useful to create nice plots. Looks for all files matching ${simtempl}-${anatempl}-*.res, and creates a line in the gnuplot script based on a template you provide.
.Ve
.PP
Following variables are exported (see PostProcLib.pm for a full list):
.PP
.Vb 21
\&                           %simdata             # contains all simulation variables and their value lists
\&                           @results             # an array of all results for a sweep (i.e. a var with a ';'-sep. value list
\&                           $sweepvar            # SWEEPVAR
\&                           $normvar             # NORMVAR
\&                           $sweepvals           # string containing all names and values of parameters for the sweep, joined with '-'
\&                           $datacol             # DATACOL
\&                           $count               # cfr. OUTPUT FILES section
\&                           $simtempl            # SIMTYPE
\&                           $anatempl            # ANALYSIS_TEMPLATE
\&                           $dirname             # name of run directory. cfr. OUTPUT FILES section
\&                           $last                # indicates end of a sweep
\&                           $verylast            # indicates end of all simulations
\&                           $sweepvartitle       # title for SWEEPVAR (from Dictionary.pm) 
\&                           $title               # TITLE 
\&                           $legend              # plot legend (uses Dictionary.pm)
\&                           $legendtitle         # plot legend title (uses Dictionary.pm)
\&                           $xlabel              # XLABEL        
\&                           $ylabel              # YLABEL        
\&                           $logscale            # LOGSCALE
\&                           $plot                # corresponds to -p flag
\&                           $interactive         # corresponds to -i flag
.Ve
.PP
An example of how all this is used:
.PP
.Vb 6
\&        sub YourRoutine {
\&        ## Unless you want to dig really deep into the code, start all your routines like this:
\&        ## Get all arguments, to whit: $datafilename,$count,$dataref,$flagsref,$returnvalue
\&        my @args=@_; 
\&        ## But don't bother with these, following function does all the processing for you:
\&        &prepare_plot(@args);
.Ve
.PP
.Vb 1
\&        ## this makes all above-listed variables available
.Ve
.PP
.Vb 3
\&        ## Define your own variables.
\&        ## As every variable can have a list of values, 
\&        ## $simdata{'_YOURVAR1'} is an array reference.
.Ve
.PP
.Vb 1
\&        my $yourvar=${$simdata{'_YOURVAR1'}}[0];
.Ve
.PP
.Vb 1
\&        my @sweepvarvals=@{$simdata{$sweepvar}};
.Ve
.PP
.Vb 2
\&        ## $verylast indicates the end of all simulations
\&        if($verylast==0) {
.Ve
.PP
.Vb 1
\&        ## what to do for all simulations
.Ve
.PP
.Vb 1
\&        ## example: parse SynSim .res file and put into final files for gnuplot
.Ve
.PP
.Vb 10
\&        open(HEAD,">${simtempl}-${anatempl}-${sweepvals}.res");
\&        open(IN,"<${simtempl}_C$count.res");
\&        while(<IN>) {
\&                /\e#/ && !/Parameters|$sweepvar/ && do {
\&                ## do something with $_
\&                print HEAD $_
\&                };
\&        }
\&        close IN;
\&        close HEAD;
.Ve
.PP
.Vb 7
\&        my $i=0;
\&        foreach my $sweepvarval ( @sweepvarvals ) {
\&                open(RES,">>${simtempl}-${anatempl}-${sweepvals}.res");
\&                print RES "$sweepvarval\et$results[$i]";
\&                close RES;
\&                $i++;
\&        }
.Ve
.PP
.Vb 8
\&        ## $last indicates the end of a sweep
\&        if($last) {
\&          ## $interactive corresponds to the -i flag
\&                  if($interactive) {
\&                    ## do something, typically plot intermediate results
\&                my $gnuplotscript=<<"ENDS";
\&                # your gnuplot script here
\&                ENDS
.Ve
.PP
.Vb 1
\&                &gnuplot($gnuplotscript);
.Ve
.PP
.Vb 4
\&                }               # if interactive
\&          }                     # if last
\&        } else {
\&         ## On the very last run, collect the results into one nice plot
.Ve
.PP
.Vb 4
\&        ## You must provide a template line for gnuplot. Next line is a good working example.
\&        ## This line will be eval()'ed by the &gnuplot_combined() routine. 
\&        ## This means the variables $filename and $legend are defined in the scope of this routine. 
\&        ## Don't locally scoped put variables in there, use the substitution trick as below or some other way.
.Ve
.PP
.Vb 2
\&        #this is very critical. The quotes really matter!
\&        # as a rule, quotes inside gnuplot commands must be escaped
.Ve
.PP
.Vb 2
\&        my $plotlinetempl=q["\e'$filename\e' using (\e$1*1):(\e$_DATACOL) title \e"$legend\e" with lines"];
\&        $plotlinetempl=~s/_DATACOL/$datacol/; ##this is a trick, you might try to eval() the previous line or something. TIMTOWDI :-)
.Ve
.PP
.Vb 3
\&        my $firstplotline=<<"ENDH";
\&        # header for your gnuplot script here
\&        ENDH
.Ve
.PP
.Vb 2
\&        &gnuplot_combined($firstplotline,$plotlinetempl);
\&        }
.Ve
.PP
.Vb 1
\&        } #END of YourRoutine()
.Ve
.Sh "Statistical analysis"
.IX Subsection "Statistical analysis"
A module for basic statistical analysis is also available (\f(CW\*(C`Analysis.pm\*(C'\fR). Currently, the module provides 2 routines: 
.IP "\fIcalc_statistics()\fR" 4
.IX Item "calc_statistics()"
To calculate average, standard deviation, min. and max. of a set of values.
.Sp
Arguments:
.Sp
.Vb 5
\&        $file: name of the results file. The routine requires the data to be in whitespace-separated columns.   
\&        $par: Determines if the data will be differentiated before processing ($par='DIFF') or not (any other value for $par). Differentiation is defined as subtracting the previous value in the array form the current value. A '0' is prepended to the array to avoid an undefined first point.
\&        $datacol: column to use for data
\&        $title: optional, a title for the histogram 
\&        $log: optional, log of values before calculating histogram or not ('LOG' or '')
.Ve
.Sp
Use:
	my \f(CW$file\fR=\*(L"your_results_file.res\*(R";
	my \f(CW$par\fR='\s-1YOURPAR\s0';
	my \f(CW$datacol\fR=2;
	my \f(CW%stats\fR=%{&calc_statistics($file,[$par, \f(CW$datacol\fR])};
.Sp
.Vb 4
\&        my $avg=$stats{$par}{AVG}; # average
\&        my $stdev=$stats{$par}{STDEV}; # standard deviation
\&        my $min=$stats{$par}{MIN}; # min. value in set
\&        my $max=$stats{$par}{MAX}; # max. value in set
.Ve
.IP "\fIbuild_histograms()\fR" 4
.IX Item "build_histograms()"
To build histograms. There are 3 extra arguments:
.Sp
.Vb 3
\&        $nbins: number of bins in the histogram
\&        $min: force the value of the smallest bin (optional)
\&        $max: force the value of the largest bin (optional)
.Ve
.Sp
use:
	my \f(CW$par\fR='\s-1DATA\s0';
	my \f(CW%hists\fR=%{&build_histograms(\*(L"your_results_file.res\*(R",[$par,$datacol],$title,$log,$nbins,$min,$max)};
.Sp
\&\s-1NOTE:\s0 Because the extra arguments are last, the \f(CW$title\fR and \f(CW$log\fR arguments can not be omitted. If not needed, supply ''.
.SH "RUNNING SYNSIM"
.IX Header "RUNNING SYNSIM"
The SynSim script must be executed in a subdirectory of the SynSim
directory which contains the \s-1TEMPLATES\s0 subdir and the datafile (like the Example directory in the distribution). 
.PP
The command line is as follows:
.PP
.Vb 1
\&        ./synsim [-h -i -p -w -v -N -P -f] [datafile] [remote hostname]
.Ve
.PP
The \f(CW\*(C`synsim\*(C'\fR script supports following command line options:
.PP
.Vb 9
\&        none: defaults to -f synsim.data
\&         -f [filename]: 'file input'. Expects a file containing info about simulation and device type. 
\&         -p : plot. This enables generation of postscript plots via gnuplot. A postprocessing routine is required to generate the plots.
\&         -i : interactive. Enables generation of a plot on the screen after every iteration. Assumes -p -v.  A postprocessing routine is required to generate the plots.
\&         -v : 'verbose'. Sends simulator output to STDOUT, otherwise to the [rundir]/simlog file
\&         -w : 'warn'. Show warnings about undefined variables
\&         -N : 'No simulations'. Perform only postprocessing.
\&         -P : 'Plot only'. Only plots the generated PostScript file. 
\&         -h, -? : short help message
.Ve
.PP
If [remote hostname] is provided, SynSim will try to run the simulation on the remote host.
.PP
The current implementation requires:
.PP
\&\-ssh access to remote host
.PP
\&\-scp access to remote host
.PP
\&\-rsync server on the local host
.PP
\&\-or,alternatively, an \s-1NFS\s0 mounted home directory
.PP
\&\-as such, it will (probably) only work on Linux and similar systems
.SH "OUTPUT FILES"
.IX Header "OUTPUT FILES"
SynSim creates a run directory \f(CW\*(C`{SIMTYPE}\-\*(C'\fR\fI[datafile without .data]\fR. It copies all necessary template files and source files to this directory; all output files are generated in this directory.
.PP
SynSim generates following files:
.IP "\(bu" 4
Output files for all simulation runs. 
.Sp
The names of these files are are \f(CW\*(C`{SIMTYPE}_C\*(C'\fR\fI[counter]_[simulation number]\fR\f(CW\*(C`.out\*(C'\fR
.Sp
\&\fIcounter\fR is increased with every new combination of variables in ','\-separated lists 
.Sp
\&\fIsimulation number\fR is the position of the value in the ';'\-separated list. 
.IP "\(bu" 4
Combined output file for all values in a ';'\-separated list. 
.Sp
The names of these files are are \f(CW\*(C`{SIMTYPE}_C\*(C'\fR\fI[counter]\fR\f(CW\*(C`_.out\*(C'\fR 
.Sp
\&\fIcounter\fR is increased with every new combination of variables in ','\-separated lists. 
.Sp
Only the lines matching \f(CW\*(C`/OUTPUT_FILTER_PATTERN/\*(C'\fR (treated as a Perl regular expression) are put in this file.
.IP "\(bu" 4
Combined output file for all values in a ';'\-separated list, with a header detailing all values for all variables. 
.Sp
The names of these files are are \f(CW\*(C`{SIMTYPE}_C\*(C'\fR\fI[counter]\fR\f(CW\*(C`.res\*(C'\fR, 
.Sp
\&\fIcounter\fR is increased with every new combination of variables in ','\-separated lists.  
.Sp
Only the lines in the \f(CW\*(C`.out\*(C'\fR files matching \f(CW\*(C`/OUTPUT_FILTER_PATTERN/\*(C'\fR (treated as a Perl regular expression) are put in this file.
.IP "\(bu" 4
Separate input files for every item in a ';'\-separated list. 
.Sp
The names of these files are are \f(CW\*(C`{SIMTYPE}_\*(C'\fR\fI[simulation number]\fR\f(CW\*(C`.{EXT}\*(C'\fR
.Sp
\&\fIsimulation number\fR is the position of the value in the list. 
.Sp
These files are overwritten for every combination of variables in ','\-separated lists.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Here are some examples of how to use SynSim for different types of simulators.
.Sh "1. Typical \s-1SPICE\s0 simulator"
.IX Subsection "1. Typical SPICE simulator"
Normal use: spice \-b circuit.sp > circuit.out
.PP
With SynSim:
.IP "1. Create a template file" 4
.IX Item "1. Create a template file"
Copy circuit.sp to TEMPLATES/SIMTYPE/circuit.templ
Replace all variable values with SynSim variable names.
.Sp
e.g. a \s-1MOS\s0 device line in \s-1SPICE:\s0
.Sp
.Vb 1
\&  M1 VD VG VS VB nch w=10u l=10u
.Ve
.Sp
becomes
.Sp
.Vb 1
\&  M1 VD VG VS VB _MODEL w=_WIDTH l=_LENGTH
.Ve
.IP "2. Create a data file (e.g. circuit.data)" 4
.IX Item "2. Create a data file (e.g. circuit.data)"
.Vb 3
\&  TITLE: MOS drain current vs. length
\&  SIMTYPE : circuit
\&  COMMAND : spice -b inputfile > outputfile
.Ve
.Sp
.Vb 5
\&  # Required for postprocessing 
\&  OUTPUT_FILTER_PATTERN : id # keep only the drain current on the output file
\&  ANALYSIS_TEMPLATE : SweepVar # default template for simple sweep
\&  SWEEPVAR : _L # we sweep the length, the other variables are parameters
\&  DATACOL: 2 # first col is the name
.Ve
.Sp
.Vb 3
\&  _L = 1u;2u;5u;10u;20u;50u
\&  _W = 10u,100u
\&  _MODEL = nch
.Ve
.Sp
There are more possible keywords, cf. \*(L"\s-1DATAFILE\s0 \s-1DESCRIPTION\s0\*(R".
.IP "3. Now run synsim" 4
.IX Item "3. Now run synsim"
.Vb 1
\&  ./synsim -p -i -v -f IDvsL.data
.Ve
.Sp
.Vb 4
\&  -p to create plots
\&  -i means interactive, so the plots are displayed during simulation
\&  -v for verbose output
\&  -f because the filename is not the default name
.Ve
.Sp
SynSim will run 12 \s-1SPICE\s0 simulations and produce 1 plot with all results.
.IP "4. Results" 4
.IX Item "4. Results"
All results are stored in the run directory, in this case:
.Sp
.Vb 1
\&  circuit-IDvsL
.Ve
.Sh "2. Simulator with command-line input and fixed output file"
.IX Subsection "2. Simulator with command-line input and fixed output file"
Normal use: simplesim \-a50 \-b100 \-c0.7
.PP
Output is saved in out.txt.
.PP
With SynSim:
.IP "1. Create a template file" 4
.IX Item "1. Create a template file"
As simplesim does not take an input file, we create a wrapper simplesim.templ in \s-1TEMPLATES/SIMTYPE\s0.
This file is actually a template for a simple perl script:
.Sp
.Vb 2
\& system("simplesim -a_VAR1 -b_VAR2 -c_VAR3");
\& system("cp out.txt $ARGV[0]");
.Ve
.IP "2. Create a data file (e.g. test.data)" 4
.IX Item "2. Create a data file (e.g. test.data)"
.Vb 3
\&  TITLE: simplesim test
\&  SIMTYPE : simplesim
\&  COMMAND : perl inputfile outputfile
.Ve
.IP "3. Now run synsim" 4
.IX Item "3. Now run synsim"
.Vb 1
\&  ./synsim -f test.data
.Ve
.Sp
SynSim will run without any messages and produce no plots.
.IP "4. Results" 4
.IX Item "4. Results"
All results are stored in the run directory, in this case:
.Sp
.Vb 1
\&  simplesim-test
.Ve
.Sh "3. Simulator without input file, configured at compile time"
.IX Subsection "3. Simulator without input file, configured at compile time"
Normal use: Modify values for #if and #ifdef constants in the header file; then compile and run.
.PP
e.g.:
.PP
.Vb 3
\&  vi bufsim3.h
\&  g++ -o bufsim3 bufsim3.cc
\&  ./bufsim3 > outputfile
.Ve
.PP
With SynSim:
.IP "1. Put the source code (bufsim3.cc) in \s-1SOURCES\s0" 4
.IX Item "1. Put the source code (bufsim3.cc) in SOURCES"
.PD 0
.IP "2. Create a template file" 4
.IX Item "2. Create a template file"
.PD
As bufsim3 does not take an input file, we create a wrapper bufsim3.templ in \s-1TEMPLATES/SIMTYPE\s0.
This file is actually a template for a perl script that writes the header file, compiles and runs the code:
.Sp
.Vb 7
\&  open(HEADER,">bufsim3.h");
\&  print HEADER <<"ENDH";
\&  #define NBUFS _NBUFS
\&  #define NPACKETS _NPACK
\&  #AGGREGATE _AGGREGATE
\&  ENDH
\&  close HEADER;
.Ve
.Sp
.Vb 2
\&  system("g++ -o bufsim3 bufsim3.cc");
\&  system("./bufsim3 $ARGV[0]");
.Ve
.IP "3. Create a datafile (e.g. Aggregate.data)" 4
.IX Item "3. Create a datafile (e.g. Aggregate.data)"
.Vb 3
\&  TITLE: bufsim3 test (_NBUFS, _NPACK) # will be substituted by the values
\&  SIMTYPE : bufsim3
\&  COMMAND : perl inputfile outputfile
.Ve
.IP "4. Run synsim" 4
.IX Item "4. Run synsim"
.Vb 1
\&  ./synsim -w -v -f Aggregate.data
.Ve
.Sp
SynSim will run verbose and flag all variables not defined in the datafile.
.IP "4. Results" 4
.IX Item "4. Results"
All results are stored in the run directory, in this case:
.Sp
.Vb 1
\&  bufsim3-Aggregate
.Ve
.Sh "4. Circuit simulator which produces binary files."
.IX Subsection "4. Circuit simulator which produces binary files."
Normal use: spectre circuit.scs \-raw circuit.raw
.PP
With SynSim:
.IP "1. Create a template file" 4
.IX Item "1. Create a template file"
Copy circuit.scs to TEMPLATES/SIMTYPE/circuit.templ
Replace all variable values with SynSim variable names.
.IP "2. Create a data file" 4
.IX Item "2. Create a data file"
The .raw file is a binary file, so it should not be touched. SynSim creates output files with extension .out, and combines these with the headers etc. (cf. \*(L"\s-1OUTPUT\s0 \s-1FILES\s0\*(R"). By keeping the extension .raw, the simulator output files will not be touched. 
.Sp
In the datafile:
.Sp
.Vb 3
\&  TITLE: Spectre simulation with SPF output
\&  EXT: .scs
\&  COMMAND: spectre inputfile -raw outputfile.raw > outputfile
.Ve
.IP "3. Run synsim" 4
.IX Item "3. Run synsim"
SynSim will process \f(CW\*(C`outputfile\*(C'\fR, but not \f(CW\*(C`outputfile.raw\*(C'\fR.
.IP "4. Postprocessing" 4
.IX Item "4. Postprocessing"
To access the binary files, you'll have to write your own postprocessing routines. Most likely they will rely on an external tool to process the binary data. The files will be found in the run directory, and have names as described in \*(L"\s-1OUTPUT\s0 \s-1FILES\s0\*(R", with the extra extension .raw.
.SH "TO DO"
.IX Header "TO DO"
This module is still Alpha, a lot of work remains to be done to make it more user\-friendly. The main tasks is to add a \s-1GUI\s0. A prototype can be found on my web site, it is already useful but too early to include here. The next version will also make it easier to create your own postprocessing routines.
.SH "AUTHOR"
.IX Header "AUTHOR"
Wim Vanderbauwhede <wim\ex40motherearth.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2000,2002\-2003 Wim Vanderbauwhede. All rights reserved. This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
gnuplot <http://www.ucc.ie/gnuplot/gnuplot.html>
